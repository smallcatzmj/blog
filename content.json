{"meta":{"title":"smallcatzmj","subtitle":null,"description":null,"author":"ScZmj","url":"smallcatzmj.github.io/blog","root":"/blog/"},"pages":[{"title":"about","date":"2019-05-17T16:26:55.000Z","updated":"2019-05-17T16:27:17.629Z","comments":true,"path":"about/index.html","permalink":"smallcatzmj.github.io/blog/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-05-17T16:26:05.000Z","updated":"2019-05-17T16:26:40.397Z","comments":false,"path":"categories/index.html","permalink":"smallcatzmj.github.io/blog/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-05-17T16:24:24.000Z","updated":"2019-05-17T16:25:50.901Z","comments":false,"path":"tags/index.html","permalink":"smallcatzmj.github.io/blog/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"","slug":"算法系列1","date":"2019-12-19T13:02:18.412Z","updated":"2019-12-19T08:51:43.695Z","comments":true,"path":"2019/12/19/算法系列1/","link":"","permalink":"smallcatzmj.github.io/blog/2019/12/19/算法系列1/","excerpt":"","text":"我爱学算法1.时间复杂度数据规模：1second之内解决问题： O(n^2)的算法可以处理大约10^4级别的数据 O(n)的算法可以处理大约10^8级别的数据 O(nlogn)的算法可以处理大约10^7级别的数据 因为从1一直加到10^8计算机的运行时间大约为0.4s,在1s以内。 O所表示的是代码执行的平均代码量的上界，前面通常会有一个常数，例如cO(2^n)，有的时候也指平均值。 O(logn)表示n经过几次除以一个常数的操作后，等于0 或者1等常数，如log10n = O(logn),n一直除以10直到变为1. 二分查找 log2n = O(logn) 可由数学式推导：logaN = logab * logbN，logab为一个常数。 特殊情况：时间复杂度O(sqrt(n))，素数的判断： 12345boolean isPrime(int n){ for (int x = 2 ;x*x = 0){//遍历比较两个数组的值，直到一个数组遍历完 if (nums1[p1] >= nums2[p2]){ nums1[p] = nums1[p1]; p -- ; p1 --; }else { nums1[p] = nums2[p2]; p -- ; p2 --; } }while (p2 >= 0)//数组1优先遍历完，将数组2中的剩余值传入数组1 nums1[p--] = nums2[p2--];} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}]}